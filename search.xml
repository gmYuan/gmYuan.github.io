<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[面向对象之 原型与原型链]]></title>
    <url>%2F2019%2F07%2F14%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%2F</url>
    <content type="text"><![CDATA[本文是对 原型和原型链的相关知识小结。 面向对象之 原型与原型链目录: 1 预读文档 2 原型 3 原型链 4 函数和对象 的创建过程 1 预读文档 1 JS深入之 从原型到原型链 阅读原因: 原型和原型链概念的最佳介绍博文 2 JS中先有Object还是先有Function 阅读原因: 关于Object和Function的关系介绍 3 深度解析原型中的各个难点 阅读原因: Object和Function的关系很清晰 2 原型 1 Q: 什么是原型 A: S1 JS中，每个函数都有一个prototype属性，指向一个对象 S2 JS中，每个对象都有一个proto属性，指向一个对象 S3.1 我们知道，通过构造函数B，可以创建出实例对象C S3.2 构造函数B也是函数，所以当然也有 prototype属性 S3.3 实例对象C也是对象，所以当然也有 proto属性 S3.4 特殊的是，实例对象.__proto__ = 构造函数.__prototype, 都指向同一个原型对象A S4.1 实例对象C可以读取原型对象A上的属性和方法 S4.2 原型对象A有一个constructor属性，指向其关联的构造函数 用代码表示为: 1234567891011function Person() &#123; // 构造函数: Person ......&#125;let person = new Person() // 实例对象: personconsole.log(person.__proto__ === Person.prototype) // trueconsole.log(Person.prototype.constructor === Person) // true// Object.getPrototypeOf方法,可以获得实例对象的 原型对象console.log(Object.getPrototypeOf(person) === Person.prototype) // true 用一张图表示为: 实例对象、构造函数、原型对象关系 3 原型链 1 Q: 什么是原型链 A: S1.1 每个对象都有一个原型对象，原型对象也有原型对象，一层一层的原型对象就构成了原型链 S1.2 原型链的顶层对象是Object.prototype, 再往上则: Object.prototype.__proto__ 为 null S1.3 通过原型链，可以实现属性的共享和继承 S2 原型链的属性查找机制: 会依次在 实例对象-&gt; 原型对象A-&gt; A.__proto_对象-&gt; …..-&gt; Object.prototype中查找属性 S3 原型链的属性修改机制: 只会修改实例对象 本身的属性，如果不存在，则添加该属性 蓝色部分表示为: 原型链 4 函数和对象 的创建过程 1 Object.prototype S1 浏览器内置就实现的 key-value对象，它是一个对象 + 对象都有proto属性 S2 ES规定了: Object.prototype.__proto = null 2 Function.prototype S1 浏览器内置就实现的 key-value S2 规定了: Function.prototype.__proto__ = Object.prototype 3 Function构造函数 S1 构造函数对象 具有 proto属性 + prototype属性 S2 规定了: Function.__proto__ = Function.prototype，就只是这么规定的 S3 Function.prototype = Function.prototype 4 Object构造函数 S1 构造函数对象 具有 proto属性 + prototype属性 S2 Object构造函数 是由Function构造出的实例对象，所以 Object.__proto__ = Function.prototype S3 Object.prototype = Object.prototype 5 自定义函数的 实例对象 S1 实例对象fn是由 自定义构造函数Fn构造出的，所以 fn.__proto__ = Fn.prototype S2 自定义构造函数Fn 是由 Function构造的实例，所以 Fn.__proto__ = Function.prototype ，且Fn.prototype = Fn.prototype S3 Fn.prototype是一个对象，它是由Object构造出的实例，所以 Fn.prototype.__proto__ = Object.prototype 综合上面所有内容，一张经典图理解为:]]></content>
      <categories>
        <category>JS 原型</category>
      </categories>
      <tags>
        <tag>JS 原型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客搭建]]></title>
    <url>%2F2019%2F04%2F21%2Fhexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[这周用hexo和github Pages搭建了自己的静态博客，这是过程中的小结记录。 因为主要是用来给自己备忘的，所以只是直接记录了相关的参考文档。 一 博客搭建过程1 Q: 如何搭建博客 S1 实现基本博客功能，参考这个文档即可: hexo教程：github page+独立域名搭建(1) S2 配置博客主题，依次参考以下文档: 01 hexo的next主题个性化配置教程 02 next官方文档 03 底部文字居中 04 代码块复制功能 S3 利用git分支进行多终端工作，具体可见: hexo教程:基本配置+更换主题+多终端工作+coding page部署分流(2) S4 发布步骤,代码见下: 1234567hexo cleanhexo s --debughexo dhexo g]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
